# -*- coding: utf-8 -*-
"""Inference code_v2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1g4BqMFpCCvUbrebaZTBizmHVb5HQVDiG
"""

from google.colab import drive
drive.mount('/content/gdrive/')

"""# 1. CNN 구성"""

import torch
import torch.nn as nn
from torchvision import transforms
from torch.utils.data import Dataset
from PIL import Image
from torch.utils.data import DataLoader
import torch.optim as optim
from sklearn.model_selection import train_test_split

class CNN(nn.Module):
    def __init__(self, num_classes):
        super(CNN, self).__init__()
        self.features = nn.Sequential(
            nn.Conv2d(3, 32, kernel_size=3, padding=1),
            nn.ReLU(),
            nn.MaxPool2d(2, 2),

            nn.Conv2d(32, 64, kernel_size=3, padding=1),
            nn.ReLU(),
            nn.MaxPool2d(2, 2),

            nn.Conv2d(64, 128, kernel_size=3, padding=1),
            nn.ReLU(),
            nn.MaxPool2d(2, 2),

            nn.Conv2d(128, 256, kernel_size=3, padding=1),
            nn.ReLU(),
            nn.MaxPool2d(2, 2)
        )
        self.classifier = nn.Sequential(
            nn.Flatten(),
            nn.Linear(14*14*256, 512),
            nn.ReLU(),
            nn.Dropout(0.5),
            nn.Linear(512, num_classes)
        )

    def forward(self, x):
        x = self.features(x)
        x = self.classifier(x)
        return x

"""# 2. 레이블 인코더"""

import json

with open('/content/gdrive/MyDrive/03. KOREA UNI/2. Deep Learning/프로젝트/label_encoder.json', 'r', encoding='utf-8') as f:
  label_encoder = json.load(f)

print(label_encoder)
inverse_label_encoder = {v: k for k, v in label_encoder.items()}

"""# 3. 추론"""

from torchvision import transforms
def predict(image_path, model, label_encoder, transform, device):
    image = Image.open(image_path).convert('RGB')
    img_t = transform(image).unsqueeze(0).to(device)

    with torch.no_grad():
        outputs = model(img_t)
        _, pred = torch.max(outputs, 1)
        breed = label_encoder.get(pred.cpu().numpy()[0].item())
    return breed

# 이미지 변환 정의
transform = transforms.Compose([
    transforms.Resize((224,224)),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485,0.456,0.406],
                         std=[0.229,0.224,0.225]),
])



# 모델 초기화 및 weight 로딩
test_image_path = '/content/gdrive/MyDrive/03. KOREA UNI/2. Deep Learning/프로젝트/TEST_DATA/frame_540_timestamp_18000.jpg'
device = torch.device("cuda" if torch.cuda.is_available() else "cpu")





model = CNN(26)
model_path = "/content/gdrive/MyDrive/03. KOREA UNI/2. Deep Learning/프로젝트/MODEL/cnn_model_top10.pth"
checkpoint = torch.load(model_path, map_location=device)

state_dict = {k: v for k, v in checkpoint.items() if not k.startswith('classifier.4.')}

model_dict = model.state_dict()
model_dict.update(state_dict)
model.load_state_dict(model_dict)

model.eval()

# 예측
predicted_breed = predict(test_image_path, model, inverse_label_encoder , transform, device)
print(f"예측 품종: {predicted_breed}")

코리안 숏헤어 터키시 앙고라 아비시니안 코리안숏헤어